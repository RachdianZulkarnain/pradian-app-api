generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  password        String
  role            Role            @default(USER)
  pictureProfile  String?
  referralCode    String          @unique
  referredBy      String?
  createdAt       DateTime        @default(now())
  updatedat       DateTime        @updatedAt
  referralpoint   ReferralPoint[]
  coupon          Coupon[]
  events          Event[]
  transaction     Transaction[]
  createdVouchers Voucher[]       @relation("CreatedVouchers")
  voucher         Voucher[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model ReferralPoint {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("referralpoints ")
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  discount  Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("coupons")
}

model Event {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  title String @unique
  status Status @default(ACTIVE)
  description String
  thumbnail   String?
  location    String
  startDate   DateTime
  endDate     DateTime
  adminId     Int
  admin       User          @relation(fields: [adminId], references: [id])
  category    String
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tickets     Ticket[]
  transaction Transaction[]
  voucher     Voucher[]

  @@map("events")
}

enum Status {
  ACTIVE
  DRAFT
}

model Ticket {
  id                Int                 @id @default(autoincrement())
  title             String
  price             Float
  eventId           Int
  event             Event               @relation(fields: [eventId], references: [id])
  stock             Int
  description       String
  totalPrice        Float               @default(0)
  createdBy         Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  transactionDetail TransactionDetail[]

  @@map("tickets")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String
  value     Int
  stock     Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdBy Int
  creator   User     @relation("CreatedVouchers", fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([code, eventId])
  @@map("vouchers")
}

model Transaction {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id])
  uuid    String @unique @default(uuid())

  status            TransactionStatus   @default(WAITING_FOR_PAYMENT)
  paymentProof      String?
  couponUsed        String?
  pointsUsed        Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  transactionDetail TransactionDetail[]

  @@map("transactions")
}

model TransactionDetail {
  id            Int         @id @default(autoincrement())
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  ticketId      Int
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
  qty           Int
  price         Int
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt

  @@map("transaction_details")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  PAID
  REJECT
  EXPIRED
}
